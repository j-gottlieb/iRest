{"version":3,"sources":["TimerInput.js","Timer.js","StartButton.js","App.js","serviceWorker.js","index.js"],"names":["TimerInput","_this","this","react_default","a","createElement","props","message","type","onChange","e","handleChange","isOn","required","defaultValue","minutes","Component","Timer","col","seconds","style","fontSize","marginLeft","Button","onClick","action","label","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","minutesOn","minutesOff","secondsRemaining","on","bind","assertThisInitialized","startCountDown","tick","stopCountDown","audioCtx","AudioContext","osc","createOscillator","frequency","value","connect","destination","start","stop","min","Math","floor","sec","setState","clearInterval","intervalHandle","beep","time","setInterval","event","target","Fragment","src_TimerInput","StartButton","src_Timer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0f4aa0c9.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass TimerInput extends Component {\nrender() {\n  return (\n   <div>\n      <h3>{this.props.message}</h3>\n      <input\n        type=\"number\"\n        onChange={(e) => this.props.handleChange(e, this.props.isOn)}\n        required\n        defaultValue={this.props.minutes}/>\n  </div>\n     );\n   }\n}\n\nexport default TimerInput\n","import React, { Component } from 'react';\n\nclass Timer extends Component {\n  render() {\n    let col\n    if (this.props.seconds) col = ':'\n      return (\n       <div>\n        <h1 style={{ fontSize: 100, marginLeft:100 }}>\n          {this.props.minutes}\n          {col}{this.props.seconds}\n        </h1>\n       </div>\n     );\n   }\n}\n\nexport default Timer\n","import React, { Component } from 'react';\n\nclass Button extends Component {\n   render() {\n     return(\n      <div>\n       <button onClick={(a) => this.props.action(true)}>{this.props.label}</button>\n     </div>\n      );\n  }\n}\n\nexport default Button\n","import React, { Component } from 'react';\nimport './App.css';\nimport TimerInput from './TimerInput.js'\nimport Timer from './Timer.js'\nimport Button from './StartButton.js'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      seconds: null,\n      minutes: null,\n      minutesOn: 20,\n      minutesOff: 2,\n      secondsRemaining: '',\n      on: null\n    }\n    this.handleChange = this.handleChange.bind(this)\n    this.startCountDown = this.startCountDown.bind(this)\n    this.tick = this.tick.bind(this)\n    this.stopCountDown = this.stopCountDown.bind(this)\n  }\n\n  beep() {\n    const audioCtx = new AudioContext()\n    const osc = audioCtx.createOscillator()\n    osc.type = 'sine'\n    osc.frequency.value = 440\n    osc.connect(audioCtx.destination)\n    osc.start()\n    osc.stop(.5)\n  }\n\n  tick() {\n    const min = Math.floor(this.state.secondsRemaining / 60)\n    const sec = this.state.secondsRemaining - (min * 60)\n    this.setState({\n      minutes: min,\n      seconds: sec\n    })\n\n    if (sec < 10) {\n      this.setState({\n        seconds: '0' + sec\n      })\n    }\n\n    if (this.state.secondsRemaining === 0) {\n      clearInterval(this.intervalHandle)\n      this.beep()\n      this.startCountDown(this.state.on)\n    }\n    this.setState({\n      secondsRemaining: this.state.secondsRemaining - 1\n    })\n  }\n\n  startCountDown(on) {\n    this.intervalHandle = setInterval(this.tick, 1000)\n    let time\n    let isOn\n    if (on) {\n      time = (this.state.minutesOn * 60) - 1\n      isOn = false\n    } else {\n      time = (this.state.minutesOff * 60) - 1\n      isOn = true\n    }\n    this.setState({\n      secondsRemaining: time,\n      on: isOn\n    })\n  }\n\n  stopCountDown() {\n    clearInterval(this.intervalHandle)\n    this.setState({\n      minutes: null,\n      seconds: null\n    })\n  }\n\n  handleChange(event, isOn) {\n    if (isOn) {\n      this.setState({\n        minutesOn: event.target.value\n      })\n    } else {\n      this.setState({\n        minutesOff: event.target.value\n      })\n    }\n  }\n\n  render() {\n    const onTimeMessage = 'Input on-screen time:'\n    const offTimeMessage = 'Input off-screen time:'\n    const startLabel = 'Start'\n    const stopLabel = 'Stop'\n    return (\n      <React.Fragment>\n        <h1>iRest</h1>\n        <TimerInput\n          isOn={true}\n          message={onTimeMessage}\n          minutes={this.state.minutesOn}\n          handleChange={this.handleChange}/>\n        <TimerInput\n          isOn={false}\n          message={offTimeMessage}\n          minutes={this.state.minutesOff}\n          handleChange={this.handleChange}/>\n        <Button\n          action={this.startCountDown}\n          label={startLabel}/>\n        <Button\n          action={this.stopCountDown}\n          label={stopLabel}/>\n        <Timer\n          minutes={this.state.minutes}\n          seconds={this.state.seconds}/>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}